#lang racket

;; TODO: Allow CSS file name to be modified
(define start "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"sample.css\">\n\t</head>\n\t<body>\n")
(define end "\t</body>\n</html>")

;; create-html-file : () -> port
;; Produces a port to a new file sample.html
;; TODO: Allow an argument to be supplied to this that allows a user to modify the file name
(define (create-html-file)
  (open-output-file "test/sample.html" #:mode 'text #:exists 'can-update))

;; create-html-file : () -> port
;; Produces a port to a new file sample.html
;; TODO: Allow an argument to be supplied to this that allows a user to modify the file name
(define (create-css-file)
  (open-output-file "test/sample.css" #:mode 'text #:exists 'can-update))

;; write-start-html-to-output-file : port -> port
;; Writes the starting string 'start to the given port and returns the given port
(define (write-start-html-to-output-file output-file)
  (begin
    (display start output-file)
    output-file))

;; write-body-to-output-file : listof string, port -> port
;; Writes the given html strings generated by our logic to the given port and returns the given port
(define (write-strings-to-output-file list-string output-file)
  (foldl (Î» (string output-file-acc)
           (write-body-to-output-file string output-file-acc))
         output-file list-string))

;; write-body-to-output-file : string port -> port
;; Writes the given html body generated by our logic to the given port and returns the given port.
;; Used in a foldl in the previous function
(define (write-body-to-output-file generated-html-string output-file)
  (begin
    (displayln generated-html-string output-file)
    output-file))

;; write-end-html-to-output-file : port -> port
;; Writes the starting string 'start to the given port and returns the given port
(define (write-end-html-to-output-file output-file)
  (begin
    (display end output-file)
    output-file))

(provide (all-defined-out))
